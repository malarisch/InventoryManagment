drop policy "allow articles" on "public"."articles";

drop policy "allow equipments" on "public"."equipments";

drop policy "allow locations" on "public"."locations";

create table "public"."companies" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "name" character varying not null,
    "description" text,
    "metadata" jsonb,
    "owner_user_id" uuid default auth.uid()
);


alter table "public"."companies" enable row level security;


alter table "public"."articles" add column "company_id" bigint not null;

alter table "public"."equipments" add column "company_id" bigint not null;

alter table "public"."locations" add column "company_id" bigint not null;

CREATE UNIQUE INDEX companies_pkey ON public.companies USING btree (id);

alter table "public"."companies" add constraint "companies_pkey" PRIMARY KEY using index "companies_pkey";

alter table "public"."articles" add constraint "articles_company_id_fkey" FOREIGN KEY (company_id) REFERENCES companies(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."articles" validate constraint "articles_company_id_fkey";

alter table "public"."companies" add constraint "companies_owner_user_id_fkey" FOREIGN KEY (owner_user_id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE RESTRICT not valid;

alter table "public"."companies" validate constraint "companies_owner_user_id_fkey";

alter table "public"."equipments" add constraint "equipments_company_id_fkey" FOREIGN KEY (company_id) REFERENCES companies(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."equipments" validate constraint "equipments_company_id_fkey";

alter table "public"."locations" add constraint "locations_company_id_fkey" FOREIGN KEY (company_id) REFERENCES companies(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."locations" validate constraint "locations_company_id_fkey";

grant delete on table "public"."companies" to "anon";

grant insert on table "public"."companies" to "anon";

grant references on table "public"."companies" to "anon";

grant select on table "public"."companies" to "anon";

grant trigger on table "public"."companies" to "anon";

grant truncate on table "public"."companies" to "anon";

grant update on table "public"."companies" to "anon";

grant delete on table "public"."companies" to "authenticated";

grant insert on table "public"."companies" to "authenticated";

grant references on table "public"."companies" to "authenticated";

grant select on table "public"."companies" to "authenticated";

grant trigger on table "public"."companies" to "authenticated";

grant truncate on table "public"."companies" to "authenticated";

grant update on table "public"."companies" to "authenticated";

grant delete on table "public"."companies" to "service_role";

grant insert on table "public"."companies" to "service_role";

grant references on table "public"."companies" to "service_role";

grant select on table "public"."companies" to "service_role";

grant trigger on table "public"."companies" to "service_role";

grant truncate on table "public"."companies" to "service_role";

grant update on table "public"."companies" to "service_role";


create policy "allow owner"
on "public"."companies"
as permissive
for all
to authenticated
using ((owner_user_id = auth.uid()));


create policy "allow articles"
on "public"."articles"
as permissive
for all
to authenticated
using ((company_id IN ( SELECT companies.id
   FROM companies
  WHERE (companies.owner_user_id = auth.uid()))));


create policy "allow equipments"
on "public"."equipments"
as permissive
for all
to authenticated
using ((company_id IN ( SELECT companies.id
   FROM companies
  WHERE (companies.owner_user_id = auth.uid()))));


create policy "allow locations"
on "public"."locations"
as permissive
for all
to authenticated
using ((company_id IN ( SELECT companies.id
   FROM companies
  WHERE (companies.owner_user_id = auth.uid()))));



