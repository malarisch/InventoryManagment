name: CI Prepare

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

jobs:
  prepare:
    name: Prepare environment and caches
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: "Move config_noseed.toml to supabase/config.toml (if present)"
        run: |
          if [ -f supabase/config_noseed.toml ]; then
            mv supabase/config_noseed.toml supabase/config.toml
          else
            echo "No config_noseed.toml present, skipping"
          fi

      - name: Install dependencies
        run: npm ci

      # Cache Prisma engines to speed up `prisma generate`
      - name: Cache Prisma engines
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/prisma
            node_modules/.prisma
          key: ${{ runner.os }}-prisma-${{ hashFiles('**/package-lock.json') }}

      - name: Install Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      # Determine Supabase CLI version for cache key stability
      - name: Determine Supabase CLI version
        id: supabase-cli-version
        run: echo "version=$(supabase --version | tr ' ' '-' )" >> $GITHUB_OUTPUT

      # Restore cached Supabase Docker images (to avoid repeated image pulls)
      - name: Restore Supabase Docker images cache
        id: supabase-images-cache
        uses: actions/cache@v4
        with:
          path: .cache/supabase-images.tar
          key: ${{ runner.os }}-supabase-images-${{ steps.supabase-cli-version.outputs.version }}-${{ hashFiles('supabase/config.toml') }}

      # Load cached Docker images if available
      - name: Load cached Supabase Docker images
        if: steps.supabase-images-cache.outputs.cache-hit == 'true'
        run: |
          docker load -i .cache/supabase-images.tar

      - name: Warm Supabase images (pull by starting stack)
        if: steps.supabase-images-cache.outputs.cache-hit != 'true'
        run: |
          supabase start
          supabase stop

      # Save Docker images to cache for future runs (only if not restored)
      - name: Save Supabase Docker images to cache
        if: steps.supabase-images-cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p .cache
          IMAGES=$(docker images --format '{{.Repository}}:{{.Tag}}' | grep -E 'supabase/|postgrest|kong|inbucket|imgproxy' | sort -u || true)
          if [ -n "$IMAGES" ]; then
            echo "Caching images:" && echo "$IMAGES"
            docker save -o .cache/supabase-images.tar $IMAGES
          else
            echo 'No Supabase images detected to cache'
          fi

      # Pre-warm Playwright browsers cache for later jobs
      - name: Determine Playwright version
        id: playwright-version
        run: echo version=$(node -e "console.log(require('playwright/package.json').version)") >> $GITHUB_OUTPUT

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ steps.playwright-version.outputs.version }}

      - name: Install Playwright browsers (populate cache)
        run: npx playwright install --with-deps
