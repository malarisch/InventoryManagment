name: "Copilot Setup Steps"

# Automatically run the setup steps when they are changed to allow for easy validation, and
# allow manual testing through the repository's "Actions" tab
on:
  workflow_dispatch:
  push:
    paths:
      - .github/workflows/copilot-setup-steps.yml
  pull_request:
    paths:
      - .github/workflows/copilot-setup-steps.yml

jobs:
  # The job MUST be called `copilot-setup-steps` or it will not be picked up by Copilot.
  copilot-setup-steps:
    runs-on: ubuntu-latest

    # Set the permissions to the lowest permissions possible needed for your steps.
    # Copilot will be given its own token for its operations.
    permissions:
      # If you want to clone the repository as part of your setup steps, for example to install dependencies, you'll need the `contents: read` permission. If you don't clone the repository in your setup steps, Copilot will do this for you automatically after the steps complete.
      contents: read

    # You can define any steps you want, and they will run before the agent starts.
    # If you do not check out your code, Copilot will do this for you.
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      - name: Install JavaScript dependencies
        run: npm ci
      - name: Install Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      # Determine Supabase CLI version for cache key stability
      - name: Determine Supabase CLI version
        id: supabase-cli-version
        run: echo "version=$(supabase --version | tr ' ' '-' )" >> $GITHUB_OUTPUT

      # Restore cached Supabase Docker images (to avoid repeated image pulls)
      - name: Restore Supabase Docker images cache
        id: supabase-images-cache
        uses: actions/cache@v4
        with:
          path: .cache/supabase-images.tar
          key: ${{ runner.os }}-supabase-images-${{ steps.supabase-cli-version.outputs.version }}-${{ hashFiles('supabase/config.toml') }}

      # Load cached Docker images if available
      - name: Load cached Supabase Docker images
        if: steps.supabase-images-cache.outputs.cache-hit == 'true'
        run: |
          docker load -i .cache/supabase-images.tar

      - name: Warm Supabase images (pull by starting stack)
        if: steps.supabase-images-cache.outputs.cache-hit != 'true'
        run: |
          supabase start
          supabase stop

      # Save Docker images to cache for future runs (only if not restored)
      - name: Save Supabase Docker images to cache
        if: steps.supabase-images-cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p .cache
          IMAGES=$(docker images --format '{{.Repository}}:{{.Tag}}' | grep -E 'supabase/|postgrest|kong|inbucket|imgproxy' | sort -u || true)
          if [ -n "$IMAGES" ]; then
            echo "Caching images:" && echo "$IMAGES"
            docker save -o .cache/supabase-images.tar $IMAGES
          else
            echo 'No Supabase images detected to cache'
          fi
      - name: Start Supabase stack
        run: supabase start
      - name: Update Supabase Migrations
        run: npx supabase migrations up

      - name: Export Supabase environment
        run: ./scripts/write-supabase-env.sh > .env.local

      - name: Create symlink for .env
        run: ln -s .env.local .env

      - name: Create Prisma client
        run: npx prisma generate
