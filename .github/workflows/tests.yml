name: CI Prepare

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main, dev ]

permissions:
  contents: read

jobs:
  prepare:
    name: Prepare environment and caches
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      - name: Install dependencies
        run: npm ci


      - name: Install Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      # Determine Supabase CLI version for cache key stability
      - name: Determine Supabase CLI version
        id: supabase-cli-version
        run: echo "version=$(supabase --version | tr ' ' '-' )" >> $GITHUB_OUTPUT

      # Restore cached Supabase Docker images (to avoid repeated image pulls)
      - name: Restore Supabase Docker images cache
        id: supabase-images-cache
        uses: actions/cache@v4
        with:
          path: .cache/supabase-images.tar
          key: ${{ runner.os }}-supabase-images-${{ steps.supabase-cli-version.outputs.version }}-${{ hashFiles('supabase/config.toml') }}
          restore-keys: |
            ${{ runner.os }}-supabase-images-${{ steps.supabase-cli-version.outputs.version }}-
            ${{ runner.os }}-supabase-images-

      # Load cached Docker images if available
      - name: Load cached Supabase Docker images
        if: steps.supabase-images-cache.outputs.cache-hit == 'true'
        run: |
          docker load -i .cache/supabase-images.tar

      - name: Warm Supabase images (pull by starting stack)
        if: steps.supabase-images-cache.outputs.cache-hit != 'true'
        run: |
          supabase start
          supabase stop

      # Save Docker images to cache for future runs (only if not restored)
      - name: Save Supabase Docker images to cache
        if: steps.supabase-images-cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p .cache
          IMAGES=$(docker images --format '{{.Repository}}:{{.Tag}}' | grep -E 'supabase/|postgrest|kong|inbucket|imgproxy' | sort -u || true)
          if [ -n "$IMAGES" ]; then
            echo "Caching images:" && echo "$IMAGES"
            docker save -o .cache/supabase-images.tar $IMAGES
          else
            echo 'No Supabase images detected to cache'
          fi

      - name: Install Playwright browsers (populate cache)
        run: npx playwright install --with-deps
      - name: Start Supabase
        run: npx supabase start
        
      - name: Export Supabase environment
        run: ./scripts/write-supabase-env.sh > .env.local

      - name: Run ESLint and TypeScript
        run: |
          npm run lint
          npm run test:tsc

      - name: Run unit tests
        run: npm run test:unit


      - name: Run Playwright tests
        env:
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
          PLAYWRIGHT_BASE_URL: http://127.0.0.1:3000
        run: npm run test:e2e

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          if-no-files-found: ignore

      - name: Stop Supabase stack
        if: always()
        run: supabase stop
