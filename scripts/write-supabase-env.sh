
#!/usr/bin/env bash
# write-supabase-env.sh
#
# Writes Supabase CLI environment output to .env.local for local Next.js runs.
# Usage: ./scripts/write-supabase-env.sh > .env.local
#
# Extracts Supabase project env variables and outputs them in .env format for Next.js.

set -euo pipefail

# Use the Supabase CLI via 'npx supabase' to avoid requiring a global install.
if ! command -v npx >/dev/null 2>&1; then
  echo "# npx not found; please install Node.js/npm to run this script" >&2
  exit 1
fi

# prefer 'npx supabase' so users don't need a global supabase binary
SUPABASE_CMD="npx supabase"

# Extract environment variables from supabase status
echo "# Generated by scripts/write-supabase-env.sh"

# Try to fetch env output without failing the whole script if the CLI returns non-zero
SUPABASE_ENV="$($SUPABASE_CMD status -o env 2>/dev/null || true)"

if [[ -z "${SUPABASE_ENV}" ]]; then
  echo "# Could not read Supabase env. Is Supabase running?" >&2
  echo "# Start it with: npx supabase start" >&2
  echo "# Falling back to empty values so you can edit them manually."
fi

# helper to get the first matching env value from the provided names
first_env_value() {
  local content="$1"; shift
  local name
  for name in "$@"; do
    # print the first occurrence of NAME=...
    # use cut -f2- to preserve any '=' inside the value
    local line
    line=$(echo "$content" | grep -E "^${name}=" | head -1 || true)
    if [[ -n "$line" ]]; then
      echo "$line" | cut -d'=' -f2- | tr -d '"' | tr -d '\r'
      return 0
    fi
  done
  return 1
}

# Extract each variable separately to avoid contamination
API_URL="$(first_env_value "$SUPABASE_ENV" API_URL || true)"
DB_URL="$(first_env_value "$SUPABASE_ENV" DB_URL || true)"
ANON_KEY="$(first_env_value "$SUPABASE_ENV" ANON_KEY || true)"
SERVICE_ROLE_KEY="$(first_env_value "$SUPABASE_ENV" SERVICE_ROLE_KEY || true)"

# S3 protocol variables vary by CLI version; try multiple keys
S3_ACCESS_KEY_ID="$(first_env_value "$SUPABASE_ENV" S3_PROTOCOL_ACCESS_KEY_ID S3_ACCESS_KEY_ID || true)"
S3_SECRET_ACCESS_KEY="$(first_env_value "$SUPABASE_ENV" S3_PROTOCOL_ACCESS_KEY_SECRET S3_PROTOCOL_SECRET_ACCESS_KEY S3_SECRET_ACCESS_KEY || true)"
S3_REGION="$(first_env_value "$SUPABASE_ENV" S3_PROTOCOL_REGION S3_REGION || true)"
STORAGE_S3_URL="$(first_env_value "$SUPABASE_ENV" STORAGE_S3_URL S3_PROTOCOL_URL S3_URL || true)"

# Output in Next.js format
if [[ -z "${API_URL}" || -z "${ANON_KEY}" ]]; then
  echo "# WARNING: Missing Supabase URL or Anon Key. Fill these manually or start Supabase and re-run."
fi
echo "NEXT_PUBLIC_SUPABASE_URL=\"${API_URL}\""
echo "NEXT_PUBLIC_SUPABASE_ANON_KEY=\"${ANON_KEY}\""
echo "SUPABASE_SERVICE_ROLE_KEY=\"${SERVICE_ROLE_KEY}\""
echo ""
echo "# S3 Storage Configuration"
echo "S3_ACCESS_KEY_ID=\"${S3_ACCESS_KEY_ID}\""
echo "S3_SECRET_ACCESS_KEY=\"${S3_SECRET_ACCESS_KEY}\""
echo "S3_REGION=\"${S3_REGION}\""
echo "NEXT_PUBLIC_STORAGE_S3_URL=\"${STORAGE_S3_URL}\""
echo "DATABASE_URL=\"${DB_URL}\""
echo "DB_URL=\"${DB_URL}\""